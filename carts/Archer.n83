Cart = {
  name="Archer",
  info="a puzzle game",
  api="n83",
  icon=SPRCODE("1/2 redgehog facing down"),
}

Redge = {
  stop=SPRCODE("1/2 redgehog facing down"),
  down=SPRCODE("1/2 redgehog moving down"),
  right=SPRCODE("1/2 redgehog moving right"),
  left=SPRCODE("1/2 redgehog moving left"),
  up=SPRCODE("1/2 redgehog moving up"),
}

Arrow_sprites = {
  left=SPRCODE("WIDE-HEADED LEFTWARDS HEAVY BARB ARROW"),
  up=SPRCODE("WIDE-HEADED UPWARDS HEAVY BARB ARROW"),
  right=SPRCODE("WIDE-HEADED RIGHTWARDS HEAVY BARB ARROW"),
  down=SPRCODE("WIDE-HEADED DOWNWARDS HEAVY BARB ARROW"),
}

Fruit = SPRCODE("CHERRIES")
Ogre = SPRCODE("JAPANESE OGRE")
Bomb = SPRCODE("BOMB")
Explosion = SPRCODE("COLLISION SYMBOL")

Legend = {
  ["b"]={Bomb,0},
  ["o"]={Ogre,8},
  ["f"]={Fruit,0},
  ["<"]={Arrow_sprites.left,3},
  ["^"]={Arrow_sprites.up,3},
  [">"]={Arrow_sprites.right,3},
  ["v"]={Arrow_sprites.down,3},
  ["T"]={SPRCODE("brick wall top"),-1},
  ["|"]={SPRCODE("brick wall"),-1},
  ["@"]={Redge.stop,0},
}

Plans = {
  {
    "@    ",
    " b o ",
    "   v ",
  },
  {
    "@>  <o",
    "  b   ",
    "   of "
  },
  {
    "o   ^ ",
    "@ b bb",
    "  b o ",
    "o   vf",
  },
  {
    " b ^f>",
    " < b  ",
    " ^ <  ",
    "@  ^bf",
    " b > o",
  },
  {
    " ^ v ",
    " o o ",
    "     ",
    "bTTTb",
    "  b  ",
    "o   @",
  },
  {
    "b b o",
    " @ < ",
    "b b<b",
    " v   ",
    "bvb<b",
    "  v  ",
    "b b b",
  },
}

shoot_speed = 1
Carry_slot = { W/2, H-S }

function new_level(i)
  local plan = Plans[i]
  if not plan then ERROR("Bad plan","No plan for level",i) return end

  local h = #plan
  local w = #plan[1]
  local player = nil
  local tint = ((i+12)*3)%13

  map = MAP({
    [Arrow_sprites.left]={"arrow","fragile"},
    [Arrow_sprites.up]={"arrow","fragile"},
    [Arrow_sprites.down]={"arrow","fragile"},
    [Arrow_sprites.right]={"arrow","fragile"},
    [Fruit]={"edible","fragile"},
    [Bomb]={"movable"}
  })

  ogres = LOOP()

  for i=1,w do
    for j=1,h do
      local here = CHARAT(plan[j],i)
      local p = Legend[here]

      if p then
        local t = p[2]
        if t==-1 then t=tint end
        local e = map:set(i+1,j+1,p[1],t)
        if here=="@" then
          player = e
        end
        if here=="o" then
          ogres:add(e)
        end
      end
    end
    map:set(i+1,1,SPRCODE("brick wall top"),tint)
    map:set(i+1,h+2,SPRCODE("brick wall top"),tint)
  end

  for j=1,h+2 do
    map:set(1,j,SPRCODE("border right"),tint)
    map:set(w+2,j,SPRCODE("border left"),tint)
  end
  map:centre(W/2,H/2)

  return player
end

function Cart:START()
  FIELD(1,Redge.stop,"Best level","Never played",3)
  FIELD(2,SPRCODE("TROPHY"),"Completions","Not completed",2)
  FIELD(3,SPRCODE("CHERRIES"),"Best score","Not completed",3)
  FIELD(4,SPRCODE("PILE OF POO"),"Fewest faults","Not completed",4)
  FIELD(5,nil,"Credits","IDEALsoft 19828")
  FIELD(6,nil,"Inspired by","C64 Saracen")
  GO(Menu)
end

------------------------------------------------------------------- menu

Menu = MODE("Main menu")

-- standard menu functions
function Menu:START() self.menu = MAINMENU({Main}) end
function Menu:TOUCH(x, y) self.menu:handle_touch(x, y) end
function Menu:DRAG(ox, oy, x, y) self.menu:handle_drag(ox, oy, x, y) end
function Menu:RELEASE(ox, oy, x, y) self.menu:handle_release(ox, oy, x, y) end

function Menu:DRAW()
  CLS()
  DRAW(self.menu)
  COLOUR(5)
  BLOCK(L, L, W-2*L, 4*L)
  TWINKLE()
  BOX(L, L, W-2*L, 4*L)
  COLOUR(13)
  TITLE(Cart.name, W/2, 3*L, 0, 0)
  DRAWFIELD(2,S+6*L)
end

------------------------------------------------------------------- main

Main = MODE("Play")
Main.icon = Ogre

function wigwag() return FLR(T/8)%2 end

function Main:START()
  local state = LOAD()
  LOG("Loaded state",state)
  level = state[1] or 1
  score = state[2] or 0
  faults = state[3] or 0
  POST(1,level)
  player = new_level(level)
  restart_button = ENT(W/2,S,S,SPRCODE("LEFTWARDS ARROW WITH HOOK"))
  arrows = LOOP()
  explosions = LOOP()
  TIMER(60)
end

------------------------------------------------------------------- main:draw

function draw_scene()
  DRAW(map)
  DRAW(arrows)
  DRAW(explosions)
end

function draw_state()
  COLOUR(4)
  PRINT(score, W/4, L, 0, 0)
  COLOUR(1)
  PRINT(faults, 3*W/4, L, 0, 0)
  DRAW(restart_button)
  if player_carrying then
    DRAW(player_carrying)
    TWINKLE()
    BOX(player_carrying.x-S,player_carrying.y-S,S*2,S*2)
  end
end

function Main:DRAW()
  CLS()
  draw_scene()
  draw_state()
end

------------------------------------------------------------------- main:update

function player_shoot()
  local player_shooting = player_carrying:moveto(player.x-map.cx,player.y-map.cy)
  arrows:add(player_shooting)
  player_shooting.from_player = true
  player_carrying = nil
  if IS(player_shooting,Arrow_sprites.left) then player_shooting:speed(-shoot_speed,0) return end
  if IS(player_shooting,Arrow_sprites.up) then player_shooting.dy = -shoot_speed return end
  if IS(player_shooting,Arrow_sprites.right) then player_shooting.dx = shoot_speed return end
  if IS(player_shooting,Arrow_sprites.down) then player_shooting.dy = shoot_speed return end
  ERROR("bad assertion","player tried to shoot a weird object",player_shooting)
end

function ogre_shoot(ogre)
  local x, y = map:whereis(ogre)
  arrows:add(ENT(x,y,S,Arrow_sprites.left,0):speed(-shoot_speed,0))
  arrows:add(ENT(x,y,S,Arrow_sprites.right,0):speed(shoot_speed,0))
  arrows:add(ENT(x,y,S,Arrow_sprites.up,0):speed(0,-shoot_speed))
  arrows:add(ENT(x,y,S,Arrow_sprites.down,0):speed(0,shoot_speed))
end

function arrow_hit(here,a)
  --LOG("Arrow",a,"hit",here)

  if here==player then
    if a.from_player then return end
    LOG("Player was shot by an ogre.")
    GO(Over)
  end


  if IS(here,Ogre) then
    LOG("Arrow",i,"hit an ogre.")
    if not a.from_player then return end
    ogre_shoot(here)
    return
  end

  arrows:remove(a)

  if IS(here,Bomb) then
    LOG("Arrow",a,"hit a bomb.")
    local x, y = map:whereis(here)
    arrows:remove(a)
    for bx=-1,1 do
      for by=-1,1 do
        local e = ENT(x+bx*S,y+by*S,S,Explosion)
        e.age = 15
        explosions:add(e)
      end
    end
    return
  end

  if IS(here,"fragile") then
    LOG("Fragile entity",here.id,here.spr,"was shot, 1 fault.")
    faults = faults + 1 -- 2 if it's yours
    map:free(here)
  end

  if IS(here,"edible") then
    LOG("Edible entity",here.id,here.spr,"was shot, 3 fault.")
    faults = faults + 3 -- 5 if it's yours
  end

  if a.from_player then
    LOG("Wasted a shot, 1 fault.")
    faults = faults + 1 -- wasted an arrow
  end

end

function explode(here)
  if here==player then
    LOG("Player was exploded.")
    GO(Over)
    return
  end

  if IS(here,Ogre) then
    map:free(here)
    ogres:remove(here)
    LOG("Ogre was exploded, now ",ogres)
    for o in ITEMS(ogres) do
      ogre_shoot(o) -- enrage other ogres
    end
    return
  end

  if IS(here,Bomb) then
    LOG("Bomb was exploded, 5 points.")
    score = score + 5
    local b = map:free(here)
    for ox=-1,1 do
      for oy=-1,1 do
        local e = ENT(b.x+ox*S,b.y+oy*S,S,Explosion)
        e.age = 20
        explosions:add(e)
      end
    end
    return
  end

  if IS(here,"fragile") then
    LOG("Fragile entity",here.id,here.spr,"was exploded, 5 faults.")
    faults = faults + 5
    map:free(here)
  end

  if IS(here,"edible") then
    LOG("Edible entity",here.id,here.spr,"was exploded, 5 faults.")
    faults = faults + 5 -- 10 overall because fragile
  end

end

function move(dx,dy)
  map:move(player,dx,dy,10)
  ANIMATE(player,wigwag)
  if dx<0 then player.spr=Redge.left return end
  if dx>0 then player.spr=Redge.right return
  end
  if dy<0 then player.spr=Redge.up return end
  if dy>0 then player.spr=Redge.down return end
  player.spr=Redge.stop
end

function Main:UPDATE()
  if ogres.length==0 and arrows.length==0 and explosions.length==0 then
    SAVE(level,score,faults)
    GO(WinLevel)
    return
  end

  map:UPDATE()
  for a in ITEMS(arrows) do
    a:step()

    if a:oob() then
      LOG("oob",a)
      arrows:remove(a)
    end

    local here = map:under(a)
    if here then
      arrow_hit(here,a)
    end
  end
  for e in ITEMS(explosions) do
    e:step()
    e.age = e.age - 1
    if e.age<=10 then
      local here = map:under(e)
      if here then
        explode(here)
      end
    end
    if e.age<=0 then
      explosions:remove(e)
    end
  end
end

function Main:DRAG(ox, oy, x, y)
  if (not player.busy) and player_carrying and player_carrying:near(x,y,L) then
    player_shoot()
    player.busy = true -- don't move until release
  end

  if restart_button:near(x,y,L) then
    player.busy = true
  end

  if player.moving or player.busy then return end

  local mx,my = map:coord(x,y)
  local dx,dy = QUADRANT(mx-player.mx,my-player.my)

  local neighbour = map:get(player.mx+dx,player.my+dy)

  if not neighbour then
    move(dx,dy)
    return
  end

  if IS(neighbour,"edible") then
    LOG("Om nom nom, 10 points.")
    score = score + 10
    move(dx,dy)
    return
  end

  if IS(neighbour,"arrow") and not player_carrying then
    map:free(neighbour):moveto(Carry_slot[1], Carry_slot[2])
    player_carrying = neighbour
    move(dx,dy)
    return
  end

  if IS(neighbour,"movable") then
    if map:oob(player.mx+2*dx,player.my+2*dy) then return end

    local space = map:get(player.mx+2*dx,player.my+2*dy)
    if space then return end

    map:move(neighbour,dx,dy,5)
    move(dx,dy)
    return
  end

  player.spr=Redge.stop -- solid
end

function Main:RELEASE(x, y)
  player:stop()
  player.spr = Redge.stop
  player.busy = false

  if restart_button:near(x,y,L) then
    faults = faults + 1
    SAVE(level,score,faults)
    GO(Main)
  end
end

------------------------------------------------------------------- game over

Over = MODE("Game over")

function Over:START()
  local state = LOAD()
  level = state[1] or 1
  score = state[2] or 0
  faults = (state[3] and state[3]+1) or 1
  SAVE(level,score,faults)
end

function Over:DRAW()
  BORDER(8)
  CLS()
  COLOUR(0)
  TITLE("OOPS", W/2, H/2, 0, 0)
  COLOUR(8)
  PRINT("level "..level, W/2, H/2+S*3, 0, 0)
  PRINT("score "..score, W/2, H/2+S*4, 0, 0)
  PRINT("faults "..faults, W/2, H/2+S*5, 0, 0)
  DRAWFIELD(2,H-S*2)
end

function Over:RELEASE(x,y)
  RESTART()
end

------------------------------------------------------------------- level clear

WinLevel = MODE("Win level")

function WinLevel:START()
  local state = LOAD()
  level = (state[1] and state[1]+1) or 2
  score = state[2] or 0
  faults = state[3] or 0
  player = ENT(W/2,H/4,S,Redge.left)
  ANIMATE(player,function() return (T/5)%8 end)
  if Plans[level] then
    SAVE(level,score,faults)
  else
    -- end of the game
    POST(2,1)
    POST(3,score)
    POST(4,faults)
    level = nil
    SAVE()
  end
end

function WinLevel:DRAW()
  BORDER(8)
  CLS()
  if level then
    COLOUR(0)
    TITLE("LEVEL "..level, W/2, H/2, 0, 0)
  else
    TWINKLE()
    TITLE("VICTORY", W/2, H/2, 0, 0)
    COLOUR(0)
    DRAW(player)
  end
  COLOUR(8)
  PRINT("score "..score, W/2, H/2+S*4, 0, 0)
  PRINT("faults "..faults, W/2, H/2+S*5, 0, 0)
  DRAWFIELD(2,H-S*2)
end

function WinLevel:RELEASE(x,y)
  if level then
    GO(Main)
  else
    RESTART()
  end
end

------------------------------------------------------------------- victory

return Cart
