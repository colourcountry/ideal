game = {
  start_mode="splash",
  name="ROCKS",
  info="a matching game",
}

empty = LOOP() -- convenience

game.splash = NEWMODE()
game.main = NEWMODE()

bg = 8
hi = 0
msg = ""
debug = false
map = MAP()

function draw_scene()
  map:draw()
  falling:each(function(e)
    e:draw()
  end)

  COLOUR(0)
  if map and debug then
    for i=1,9 do
      for j=1,14 do
        local e = map:get(i,j)
        if e then
          COLOUR(e.c)
          if e.ty then
            BLOCK(e.x+j-8,e.y,1,(e.ty-e.y))
          end
        end
      end
    end
  end
end


function game:start()
  score = 0
  flags = {}
  falling = empty
  mode_menu = MENU({
    main="START"
  })
end

------------------------------------------------------------------- splash

function game.splash:start()
  jewels = empty
end

function game.splash:touch(x, y, isNew)
  local t = mode_menu:touch(x, y, isNew)
  if (t) then
    MODE(t)
  end
end

function game.splash:draw()
  CLS(11)
  draw_scene()
  draw_hiscore()
  mode_menu:draw()
  COLOUR(11)
  BLOCK(10, H/4-2*L, W-20, 5*L)
  COLOUR(-1)
  TITLE(game.name, W/2, H/4, 0, 0)
  COLOUR(0)
  PRINT("SELECT GAME MODE", W/2, H/4+2*L, 0, 0)
  BORDER(bg)
end

------------------------------------------------------------------- main

function game.main:start()
  score = 0
  falling = LOOP()
  self:setup_jewels()
  bg = FLR(RND(9))
end

function new_jewel(mx,my)
  if map:get(mx,my) then return end
  local maxcol = 4+FLR(score/4000)
  return map:set(mx,my,"1f48e",(RND(maxcol)*2)%11-1)
end

function game.main:setup_jewels()
  map:empty()
  for i=1,8 do
    for j=3,14 do
      new_jewel(i,j)
    end
  end
  map:centre(W/2,H/2)
end


function game.main:update()
  map:each(function(e,mx,my)
    if my<map.sy then
      local below = map:get(mx,my+1)
      if not below then
        map:free(mx,my)
        falling:add(e)
      end
    end
  end)

  falling:each(function(e,e_rm)
    local mx,my = map:coord(e.x, e.y+12)
    local below = map:get(mx,my)
    if my==map.sy+1 or below then
      nmx, nmy = map:grab(e)
      e_rm()
      check_line(nmx,nmy,true)
    else
      e.y = e.y + 3
      if e.y > H then
        e_rm()
      end
    end
  end)

  if falling.length==0 then
    for i=1,map.sx do
      if not map:get(i,3) then
        new_jewel(i,1)
      end
    end
  end
end

function draw_score()
  COLOUR(11)
  BLOCK(0,0,W,13)
  COLOUR(0)
  PRINT("SCORE", W/4, 0, 0, -1)
  PRINT(score, W/4, L, 0, -1)
  draw_hiscore()
end

function draw_hiscore()
  COLOUR(0)
  PRINT("HI", 3*W/4, 0, 0, -1)
  PRINT(hi, 3*W/4, L, 0, -1)
end

function game.main:draw()
  BORDER(bg)
  CLS(11)
  COLOUR(0)
  draw_scene()
  draw_score()
end

function swap(x1,y1,x2,y2)
  map:swap(x1,y1,x2,y2)
  check_line(x1,y1,true)
  check_line(x2,y2,true)
end

function same_colour(mx,my,e)
  local o = map:get(mx,my)
  return o and e and o.c==e.c
end

function check_line(mx,my,collect)
  local match = 0
  h1 = check_direction(mx,my,-1,0)-1
  h2 = check_direction(mx,my,1,0)
  if h1+h2>=3 then
    if collect then
      for i=mx-h1,mx+h2-1 do
        map:free(i,my)
      end
      match = match + h1 + h2
    end
  end
  v1 = check_direction(mx,my,0,-1)-1
  v2 = check_direction(mx,my,0,1)
  if v1+v2>=3 then
    if collect then
      for j=my-v1,my+v2-1 do
        map:free(mx,j)
      end
      match = match + v1 + v2
    end
  end
  score = score + match
  return match
end

function check_direction(mx,my,dx,dy)
  local e = map:get(mx,my)
  local a = 1
  while same_colour(mx+dx,my+dy,e) do
    e = map:get(mx+dx,my+dy)
    mx = mx+dx
    my = my+dy
    a = a + 1
  end
  return a
end

function game.main:touch(x, y, isNew, isRelease)
  if isNew then
    dmx, dmy = map:coord(x,y)
    --check_line(dmx,dmy,true)
  else
    mx, my = map:coord(x,y)
  end
  if isRelease then
    if not dmx or not dmy then return end
    if ABS(mx-dmx)+ABS(my-dmy)~=1 then return end
    swap(mx,my,dmx,dmy)
  end
end

return game
