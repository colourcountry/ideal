game = {
  start_mode="splash",
  name="SNUG",
  info="a game of interior design",
}

empty = LOOP() -- convenience

game.splash = NEWMODE()
game.main = NEWMODE()
game.over = NEWMODE()
game.instructions = INFOMODE(game.name,
  {
    {"",0,  "DESIGN A PERFECT ROOM BY PLACING 10 ITEMS OF FURNITURE IN THE BEST PLACES"},
    {"1f9f1",3, "THE WALLS"},
    {"1f532",5, "TABLES SCORE 5 FOR EVERY CHAIR AROUND THEM"},
    {"2638",7, "RUGS SCORE 2 FOR EVERY EMPTY SPACE AROUND THEM"},
    {"1f56f",4,  "LIGHTS SCORE 5 FOR EVERY WALL NEXT TO THEM"},
    {"1fa91",3,  "CHAIRS SCORE 5 FOR EVERY DIFFERENT ITEM AROUND THEM"},
    {"",0,   "PLACE ANY TWO ITEMS OF THE SAME KIND"..
             "IN SYMMETRICAL POSITIONS ABOUT THE ROOM'S HORIZONTAL OR VERTICAL AXIS"..
             "FOR A BONUS"}
  }
)

function count(x,y,n)
  local o = map:get(x,y)
  if n and o and o.name==n then return 1 end
  if not n and not o then return 1 end
  return 0
end

function count_around(x,y,n)
  return count(x-1,y-1,n)+count(x,y-1,n)+count(x+1,y-1,n)+
         count(x-1,y,n)+                 count(x+1,y,n)+
         count(x-1,y+1,n)+count(x,y+1,n)+count(x+1,y+1,n)
end

function score_table(x,y)
  return 5 * count_around(x,y,"CHAIR")
end

function score_light(x,y)
  return 5 * count_around(x,y,"WALL")
end

function score_rug(x,y)
  return 3 * count_around(x,y,nil)
end

function score_chair(x,y)
  local t = {}
  local s = 0
  local e = map:get(x-1,y)
  if e and e.name then t[e.name] = true end
  e = map:get(x+1,y)
  if e and e.name then t[e.name] = true end
  e = map:get(x-1,y-1)
  if e and e.name then t[e.name] = true end
  e = map:get(x,y-1)
  if e and e.name then t[e.name] = true end
  e = map:get(x+1,y-1)
  if e and e.name then t[e.name] = true end
  e = map:get(x-1,y+1)
  if e and e.name then t[e.name] = true end
  e = map:get(x,y+1)
  if e and e.name then t[e.name] = true end
  e = map:get(x+1,y+1)
  if e and e.name then t[e.name] = true end
  for k, v in pairs(t) do
    s = s + 5
  end
  return s
end

shelf = {
  { name="TABLE", spr="1f532", c=6, get_score=score_table },
  { name="RUG", spr="2638", c=8, get_score=score_rug },
  { name="LIGHT", spr="1f56f", c=3, get_score=score_light },
  { name="CHAIR", spr="1fa91", c=2, get_score=score_chair },
}

bg = 8
hi = 0
msg = ""
debug = false
map = MAP()
yesterday = 0

function draw_score()
  COLOUR(11)
  COLOUR(0)
  PRINT("SCORE", W/4, 0, 0, -1)
  PRINT(score, W/4, L, 0, -1)
  draw_hiscore()
end

function draw_hiscore()
  COLOUR(0)
  PRINT("HI", 3*W/4, 0, 0, -1)
  PRINT(hi, 3*W/4, L, 0, -1)
end

function draw_scene(text_colour)
  map:draw(text_colour)
  for i=1,2 do
    if choices[i] and choices[i].e then
      choices[i].e:draw()
      PRINT(choices[i].o.name,choices[i].e.x, choices[i].e.y+16,0,0)
    end
  end
  if active_choice then
    active_choice.e:draw()
  end
  COLOUR(0)
  PRINT(msg,W/2,H-12,0,0)
end

function new_room()
  map:empty()
  for i=1,8 do
    local e = map:set(i,1,"1f9f1",10)
    e.name = "WALL"
    e = map:set(i,8,"1f9f1",10)
    e.name = "WALL"
  end
  for j=2,7 do
    local e = map:set(1,j,"1f9f1",10)
    e.name = "WALL"
    e = map:set(8,j,"1f9f1",10)
    e.name = "WALL"
  end
  map:centre(W/2,H/3+2*L)
  LOG(map.sx,map.sy)
end

function random_area()
  local w = RND(4)
  if w==4 then
    w=6
  end
  h = 6/w
  return { x=(RND(h)-1)*w+2, y=(RND(w)-1)*h+2, w=w, h=h }
end

function new_choices()
  choices = {}
  choices[1] = { s=1, o=shelf[RND(#shelf)], z=random_area() }
  choices[2] = { s=2, o=choices[1].o, z=random_area() }
  while choices[2].o == choices[1].o do
    choices[2].o = shelf[RND(#shelf)]
  end
  reset_choice(1)
  reset_choice(2)
end

function reset_choice(i)
  choices[i].e = ENT((2*i-1)*W/4,3*H/4,16,choices[i].o.spr,choices[i].o.c)
  choices[i].e.get_score = choices[i].o.get_score
  choices[i].e.name = choices[i].o.name
end

function game:start()
  score = 0
  flags = {}
  mode_menu = MENU({
    main="START",
    instructions="INSTRUCTIONS"
  })
end

------------------------------------------------------------------- splash

function game.splash:start()
  choices = {}
  msg = DATA_LEAK_TEST
  new_room()
end

function game.splash:touch(x, y, isNew)
  local t = mode_menu:touch(x, y, isNew)
  if (t) then
    MODE(t)
  end
end

function game.splash:draw()
  CLS(bg)
  draw_scene()
  draw_hiscore()
  mode_menu:draw()
  COLOUR(11)
  BLOCK(10, H/4-2*L, W-20, 5*L)
  COLOUR(-1)
  TITLE(game.name, W/2, H/4, 0, 0)
  COLOUR(0)
  PRINT("SELECT GAME MODE", W/2, H/4+2*L, 0, 0)
  BORDER(bg)
end

------------------------------------------------------------------- main

function game.main:start()
  score = 0
  left = 10
  local today = RNDTODAY()
  if today ~= yesterday then
    hi = 0
    msg = "A NEW DAY"
    yesterday = today
  else
    msg = "PLACE 10 ITEMS"
  end
  new_room()
  new_choices()
  bg = FLR(RND(9))
end

function game.main:touch(x, y, isNew)
  touching = true
  if isNew then
    if y>10*16 then
      if x>W/2 then
        active_choice = choices[2]
        choices[2] = nil
      else
        active_choice = choices[1]
        choices[1] = nil
      end
    end
  else
    if active_choice then
      active_choice.e.x = x
      active_choice.e.y = y
      map:highlight(map:coord(x,y))
      map:zone(
        active_choice.z.x,
        active_choice.z.y,
        active_choice.z.w,
        active_choice.z.h
      )
    end
  end
end

function update_score()
  score = 0
  for i=2,map.sx-1 do
    for j=2,map.sy-1 do
      local e = map:get(i,j)
      if e and e.get_score then
        local es = e.get_score(i,j)
        local f = map:get(map.sx+1-i,j)
        if f and e.name==f.name then
          es = es + 5
        end
        f = map:get(i,map.sy+1-j)
        if f and e.name==f.name then
          es = es + 5
        end
        f = map:get(map.sx+1-i,map.sy+1-j)
        if f and e.name==f.name then
          es = es + 5
        end
        score = score + es
        e.text = es
      end
    end
  end
end

function game.main:update()
  if not touching then
    if active_choice then
      local placed = map:grab(active_choice.e, true, true)
      if placed then
        update_score()
        left = left - 1
        if left == 0 then
          MODE("over")
        else
          if left==1 then
            msg = "LAST ITEM"
          else
            msg = STR(left).." ITEMS LEFT"
          end
          new_choices()
        end
      else
        choices[active_choice.s] = active_choice
        reset_choice(active_choice.s)
      end
      active_choice = nil
      map:highlight()
      map:zone()
    end
  end

  touching = false
end

function game.main:draw()
  BORDER(bg)
  CLS(bg)
  COLOUR(0)
  draw_scene()
  draw_score()
end

function game.over:start()
  if score > hi then
    hi = score
    msg = "NEW HI-SCORE"
  else
    msg = "GAME OVER"
  end
end

function game.over:touch(x,y,isNew)
  MODE("splash")
end

function game.over:draw()
  BORDER(bg)
  CLS(bg)
  COLOUR(0)
  draw_scene(0)
  draw_score()
end

return game
